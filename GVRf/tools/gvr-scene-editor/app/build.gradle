/*
 * Copyright 2016 Samsung Electronics Co., LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: XmlValidator

System.setProperty("appName", "gvr-scene-editor")

if(file("../../common.gradle").exists()) {
    apply from: '../../common.gradle'
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "org.gearvrf.io.sceneeditor"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    if(project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':framework')) {
            compile project(':framework')
        } else {
            debugCompile(name: 'framework-debug', ext: 'aar')
            releaseCompile(name: 'framework-release', ext: 'aar')
        }

        if (findProject(':3DCursorLibrary')) {
            compile project (':3DCursorLibrary')
        } else {
            compile(name: '3DCursorLibrary-debug', ext: 'aar')
        }
        if (findProject(':sceneserializer')) {
            compile project (':sceneserializer')
        } else {
            compile(name: 'sceneserializer-debug', ext: 'aar')
        }
    } else {
        compile "org.gearvrf:framework:$gearvrfVersion"
        compile "org.gearvrf:3DCursorLibrary:$gearvrfVersion"
        compile "org.gearvrf:sceneserializer:$gearvrfVersion"
    }
    implementation 'com.android.support:appcompat-v7:27.0.1'
}

//TODO export plugin to jar
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

class XmlValidator implements Plugin<Project> {
    void apply(Project project) {
        project.task('validateXml') << {
            println 'Validating settings.xml file'
            File xml = project.file('src/main/assets/settings.xml');
            File xsd = project.file('src/main/res/xml/settings_schema.xsd');
            def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            def schema = factory.newSchema(xsd);
            def validator = schema.newValidator();
            validator.validate(new StreamSource(xml));
        }
    }
}

preBuild.dependsOn validateXml
